use crate::bus::Device;

pub struct Palette {
    mem: [u8; 256],
}

impl Palette {
    pub fn new() -> Palette {
        Palette { mem: [0u8; 256] }
    }

    // http://forums.nesdev.com/viewtopic.php?t=7719
    fn mirror(&self, address: u16) -> usize {
        (match address {
            0x0010 => 0x0000,
            0x0014 => 0x0004,
            0x0018 => 0x0008,
            0x001C => 0x000C,
            address => address,
        }) as usize
    }
}

impl Device for Palette {
    fn read(&mut self, address: u16) -> u8 {
        let address = self.mirror(address);
        self.mem[address]
    }

    fn write(&mut self, address: u16, data: u8) {
        let address = self.mirror(address);
        self.mem[address] = data;
    }
}

pub const PALETTE: [(u8, u8, u8); 0x40] = [
    (102, 102, 102),
    (0, 42, 136),
    (20, 18, 167),
    (59, 0, 164),
    (92, 0, 126),
    (110, 0, 64),
    (108, 6, 0),
    (86, 29, 0),
    (51, 53, 0),
    (11, 72, 0),
    (0, 82, 0),
    (0, 79, 8),
    (0, 64, 77),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (173, 173, 173),
    (21, 95, 217),
    (66, 64, 255),
    (117, 39, 254),
    (160, 26, 204),
    (183, 30, 123),
    (181, 49, 32),
    (153, 78, 0),
    (107, 109, 0),
    (56, 135, 0),
    (12, 147, 0),
    (0, 143, 50),
    (0, 124, 141),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (255, 254, 255),
    (100, 176, 255),
    (146, 144, 255),
    (198, 118, 255),
    (243, 106, 255),
    (254, 110, 204),
    (254, 129, 112),
    (234, 158, 34),
    (188, 190, 0),
    (136, 216, 0),
    (92, 228, 48),
    (69, 224, 130),
    (72, 205, 222),
    (79, 79, 79),
    (0, 0, 0),
    (0, 0, 0),
    (255, 254, 255),
    (192, 223, 255),
    (211, 210, 255),
    (232, 200, 255),
    (251, 194, 255),
    (254, 196, 234),
    (254, 204, 197),
    (247, 216, 165),
    (228, 229, 148),
    (207, 239, 150),
    (189, 244, 171),
    (179, 243, 204),
    (181, 235, 242),
    (184, 184, 184),
    (0, 0, 0),
    (0, 0, 0),
];
